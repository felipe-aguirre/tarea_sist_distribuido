// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_usermgmt_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManejoComunicacionClient is the client API for ManejoComunicacion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManejoComunicacionClient interface {
	Comunicar(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
}

type manejoComunicacionClient struct {
	cc grpc.ClientConnInterface
}

func NewManejoComunicacionClient(cc grpc.ClientConnInterface) ManejoComunicacionClient {
	return &manejoComunicacionClient{cc}
}

func (c *manejoComunicacionClient) Comunicar(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/protos.ManejoComunicacion/Comunicar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManejoComunicacionServer is the server API for ManejoComunicacion service.
// All implementations must embed UnimplementedManejoComunicacionServer
// for forward compatibility
type ManejoComunicacionServer interface {
	Comunicar(context.Context, *MessageRequest) (*MessageReply, error)
	mustEmbedUnimplementedManejoComunicacionServer()
}

// UnimplementedManejoComunicacionServer must be embedded to have forward compatible implementations.
type UnimplementedManejoComunicacionServer struct {
}

func (UnimplementedManejoComunicacionServer) Comunicar(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comunicar not implemented")
}
func (UnimplementedManejoComunicacionServer) mustEmbedUnimplementedManejoComunicacionServer() {}

// UnsafeManejoComunicacionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManejoComunicacionServer will
// result in compilation errors.
type UnsafeManejoComunicacionServer interface {
	mustEmbedUnimplementedManejoComunicacionServer()
}

func RegisterManejoComunicacionServer(s grpc.ServiceRegistrar, srv ManejoComunicacionServer) {
	s.RegisterService(&ManejoComunicacion_ServiceDesc, srv)
}

func _ManejoComunicacion_Comunicar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManejoComunicacionServer).Comunicar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ManejoComunicacion/Comunicar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManejoComunicacionServer).Comunicar(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManejoComunicacion_ServiceDesc is the grpc.ServiceDesc for ManejoComunicacion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManejoComunicacion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ManejoComunicacion",
	HandlerType: (*ManejoComunicacionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Comunicar",
			Handler:    _ManejoComunicacion_Comunicar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/comunicacion.proto",
}
